{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Compose Compiler Report to HTML","text":"<p>A utility (Gradle Plugin + CLI) to convert Jetpack Compose compiler metrics and reports to beautified \ud83d\ude0d HTML page. Made with \u2764\ufe0f for Android Developers and Composers</p> Distribution Usage Guide Install Gradle Plugin Read CLI Read Library Artifact Read"},{"location":"#motivation","title":"\ud83d\udca1 Motivation","text":"<p>The Compose Compiler plugin can generate reports / metrics around certain compose-specific concepts that can be useful to understand what is happening with some of your compose code at a fine-grained level. See this to understand this concept in detail.</p> <p>This generates reports in <code>json</code>, <code>csv</code> and <code>txt</code> files which are not easily trace-able for developers. Also, Composable function and class reports becomes large and tedious to check. This tool parses the reports and metrics generated by Compose compiler and beautifies into a HTML page and intelligently distinguishes problematic and non-problematic composable functions and classes.</p> <p>This utility doesn't generate Compose Metrics and Reports on its own. First, raw Compose report should be generated from the Compose Compiler and those generated files should be feed to this utility. By parsing that data, this utility generates the beautified report.</p>"},{"location":"#how-it-looks","title":"\ud83d\udcc8 How it looks?","text":"<p>Info</p> <p>See report generated for NotyKT app. Once report is generated, it looks like this \u2b07\ufe0f.</p> <p>View Report</p> <p>This is overall Report Overview:</p> Title Preview Brief Statistics Generates metrics from <code>.json</code> file and represents in tabular format.  Detailed Statistics Generates report from <code>.csv</code> file and represents in tabular format.  Composable Report Parses <code>-composables.txt</code> file and separates out composables with and without issues and properly highlights issues associated with them.  Class Report Parses <code>-classes.txt</code> file and separates out stable and unstable classes out of it and properly highlights issues associated with them.  <p>Right now, work is in progress and more improvements related to the report will happen in some time. If you have any feedback / suggestions related to the report, feel free to discuss.</p>"},{"location":"use/using-cli/","title":"CLI Utility","text":""},{"location":"use/using-cli/#pre-requisite","title":"Pre-requisite","text":"<p>This CLI utility just takes care of generating beautified report from generated raw report by Compose compiler. Thus, before using CLI, you'll need to generate compose compiler metrics and reports manually.</p>"},{"location":"use/using-cli/#how-to-generate-compose-compiler-metric-and-report","title":"How to generate Compose Compiler metric and report?","text":"<p>Make sure to generate Compose compiler metrics and reports as mentioned here or this good read article by Chris Banes. These files are then needed to this CLI utility to feed the data.</p> <p>To generate the report, provide details related to app, metric and report files and output directory.</p>"},{"location":"use/using-cli/#using-cli","title":"Using CLI","text":"<p>CLI utility is available in the two forms:</p> <ol> <li>JAR Distribution</li> <li>NPM package</li> </ol>"},{"location":"use/using-cli/#1-install-the-distribution","title":"1. Install the distribution","text":"JAR DistributionNPM Package <p>Navigate to the releases and download the latest JAR artifact.</p> <p>Latest: </p> <pre><code>npm install -g compose-report2html\n</code></pre> <p>Latest: </p>"},{"location":"use/using-cli/#2-know-usage","title":"2. Know usage","text":"<p>Run the command to know the usage of CLI</p> JAR DistributionNPM Package <pre><code>java -jar composeReport2Html.jar -h\n</code></pre> <pre><code>composeReport2Html.jar -h\n</code></pre> <p>\u25b6\ufe0fOutput</p> <pre><code>Usage: Compose Compiler Report to HTML Generator ~ v1.0.0-beta03 options_list\nOptions:\n    --applicationName, -app -&gt; Application name (To be displayed in the report) (always required) { String }\n--inputDirectory, -i -&gt; Input directory where composable report and metrics are available { String }\n--overallStatsFile, -overallStatsReport -&gt; Overall Statistics Metrics JSON files (separated by commas) { String }\n--detailedStatsFile, -detailedStatsMetrics -&gt; Detailed Statistics Metrics CSV files (separated by commas) { String }\n--composableMetricsFile, -composableMetrics -&gt; Composable Metrics TXT files (separated by commas) { String }\n--classMetricsFile, -classMetrics -&gt; Class Metrics TXT files (separated by commas) { String }\n--outputDirectory, -o -&gt; Output directory name { String }\n--help, -h -&gt; Usage info\n</code></pre>"},{"location":"use/using-cli/#3-generate-report","title":"3. Generate report","text":"<p>HTML Report can be generated with the following combinations. </p>"},{"location":"use/using-cli/#31-when-all-metric-and-report-files-are-available-in-the-same-directory","title":"3.1 When all metric and report files are available in the same directory","text":"<p>Assuming report and metrics generated by Compose Compiler are available in one directory then you can specify path to that directory only and utility will automatically pick files.</p> JAR DistributionNPM Package <pre><code>java -jar composeReport2Html.jar \\\n-app MyAppName \\\n-i path/to/metric/directory \\\n-o path/to/html/output\n</code></pre> <pre><code>composeReport2Html \\\n-app MyAppName \\\n-i path/to/metric/directory \\\n-o path/to/html/output\n</code></pre> <p>Info</p> <p>In the above command, path provided to <code>-i</code> parameter assumes all metrics and report are present and generates and saves report in the path provided to <code>-o</code> parameter.</p>"},{"location":"use/using-cli/#32-provide-path-to-individual-report-and-metric-files","title":"3.2 Provide path to individual report and metric files","text":"<p>You can provide each metric/report file individually using separate parameters.</p> JAR DistributionNPM Package <pre><code>java -jar composeReport2Html.jar \\\n-app MyAppName \\\n-overallStatsReport app_release-module.json \\\n-detailedStatsMetrics app_release-composables.csv \\\n-composableMetrics app_release-composables.txt \\\n-classMetrics app_release-classes.txt \\\n-o htmlReportDir\n</code></pre> <pre><code>composeReport2Html \\\n-app MyAppName \\\n-overallStatsReport app_release-module.json \\\n-detailedStatsMetrics app_release-composables.csv \\\n-composableMetrics app_release-composables.txt \\\n-classMetrics app_release-classes.txt \\\n-o htmlReportDir\n</code></pre> <p>Info</p> <p>Multiple metric/report files can be provided as a CLI parameter by providing path separated by comma (<code>,</code>).</p>"},{"location":"use/using-gradle-plugin/","title":"Gradle Plugin","text":"<p>Using the Gradle Plugin, you can fully automate the process of generating the report without any overhead. This Gradle plugin takes care of generating raw compose metrics and report from the Compose compiler and then  generates the beautified report from them.</p>"},{"location":"use/using-gradle-plugin/#apply-the-plugin","title":"\u2705 Apply the plugin","text":"<p>Apply the plugin to the module in which compose is enabled.</p> <p>Info</p> <p>Check the latest plugin release:  </p>"},{"location":"use/using-gradle-plugin/#using-the-plugins-dsl","title":"Using the plugins DSL:","text":"GroovyKotlin build.gradle<pre><code>plugins {\nid \"dev.shreyaspatil.compose-compiler-report-generator\" version \"1.0.0-beta03\"\n}\n</code></pre> build.gradle.kts<pre><code>plugins {\nid(\"dev.shreyaspatil.compose-compiler-report-generator\") version \"1.0.0-beta03\"\n}    </code></pre>"},{"location":"use/using-gradle-plugin/#using-legacy-plugin-application","title":"Using legacy plugin application:","text":"<p>Add this to top project level <code>build.gradle</code></p> GroovyKotlin build.gradle<pre><code>buildscript {\nrepositories {\nmaven {\nurl \"https://plugins.gradle.org/m2/\"\n}\n}\ndependencies {\nclasspath \"dev.shreyaspatil.compose-compiler-report-generator:gradle-plugin:1.0.0-beta03\"\n}\n}\n</code></pre> <p>Apply in the module level project:</p> <pre><code>apply plugin: \"dev.shreyaspatil.compose-compiler-report-generator\"\n</code></pre> build.gradle.kts<pre><code>buildscript {\nrepositories {\nmaven {\nurl = uri(\"https://plugins.gradle.org/m2/\")\n}\n}\ndependencies {\nclasspath(\"dev.shreyaspatil.compose-compiler-report-generator:gradle-plugin:1.0.0-beta03\")\n}\n}\n</code></pre> <p>Apply in the module level project:</p> <pre><code>apply(plugin = \"dev.shreyaspatil.compose-compiler-report-generator\")\n</code></pre>"},{"location":"use/using-gradle-plugin/#sync-the-project","title":"\ud83d\udcab Sync the project","text":"<p>Once plugin is applied, sync the project. After the project is synced, tasks for generating compose report will be  generated for the variants and flavors used in the project.</p> <p>Example</p> <p></p>"},{"location":"use/using-gradle-plugin/#generate-report","title":"\ud83e\ude84 Generate report","text":"<p>Run the Gradle task (or directly run the task from tasks pane available on the right side of IDE)</p> <pre><code>./gradlew :app:releaseComposeCompilerHtmlReport\n</code></pre> <p>If report is generated successfully, the path to report will be logged in the console</p> <p>Example (Console output)</p> <pre><code>Compose Compiler report is generated: .../noty-android/app/composeapp/build/compose_report/index.html\n\nBUILD SUCCESSFUL in 58s\n1 actionable task: 1 executed\n</code></pre>"},{"location":"use/using-gradle-plugin/#configure-parameters-for-plugin-optional","title":"\u2699\ufe0f Configure parameters for plugin (Optional)","text":"<p>If you have to configure plugin parameters manually (which is completely optional), it can be configured as follows:</p> GroovyKotlin build.gradle<pre><code>htmlComposeCompilerReport {\n// Enables metrics generation from the compose compiler\nenableMetrics = true/false // Default: `true`\n    // Enables report generation from the compose compiler\n    enableReport = true/false // Default: `true`\n// Sets the name for a report\nname = \"Report Name\" // Default: Module name\n// Output path where report will be generated\noutputPath = project.buildDir.absolutePath + \"/custom_path\" // Default: module/buildDir/compose_report\n}\n</code></pre> build.gradle.kts<pre><code>htmlComposeCompilerReport {\n// Enables metrics generation from the compose compiler\nenableMetrics.set(true/false) // Default: `true`\n// Enables report generation from the compose compiler\nenableReport.set(true/false) // Default: `true`\n// Sets the name for a report\nname.set(\"Report Name\") // Default: Module name\n// Output path where report will be generated\noutputPath.set(project.buildDir.resolve(\"custom_path\").absolutePath) // Default: module/buildDir/compose_report\n}\n</code></pre>"},{"location":"use/using-utility-as-library/","title":"Using utility as a library","text":"<p>This utility is also published as a maven artifact on Maven Central so that you can make use of it as you want to use it  (For example: automation in CI).</p>"},{"location":"use/using-utility-as-library/#add-dependency","title":"Add dependency","text":"<p>Declare the following dependencies in the project:</p> <pre><code>repositories {\nmavenCentral()\n}\ndependencies {\nimplementation(\"dev.shreyaspatil.compose-compiler-report-generator:core:$version\")\nimplementation(\"dev.shreyaspatil.compose-compiler-report-generator:report-generator:$version\")\n}\n</code></pre> <p>Refer to the latest release on GitHub Releases or maven central: </p>"},{"location":"use/using-utility-as-library/#usage","title":"Usage","text":"<pre><code>// Create a report specification with application name\nval reportSpec = ReportSpec(\"Your Application Name\")\n// Get provider for raw reports (generated by compose compiler)\nval rawReportProvider = ComposeCompilerRawReportProvider.FromDirectory(\"path/to/raw-reports\")\n// Provide metric files to generator\nval htmlGenerator = HtmlReportGenerator(\nreportSpec = reportSpec,\nmetricsProvider = ComposeCompilerMetricsProvider(rawReportProvider)\n)\n// Generate HTML (String) \nval html = htmlGenerator.generateHtml()\n</code></pre>"}]}